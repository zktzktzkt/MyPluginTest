apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
//apply plugin: 'MyCustomPlugin-local'

android {
    compileSdkVersion 32

    defaultConfig {
        applicationId "com.lpc.testgradle"
        minSdkVersion 21
        targetSdkVersion 32
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

}

//myExtension {
//    //声明哪些三方库的类需要插桩
//    thirdPackage = ["com/jaeger/library"]
//}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.jaeger.statusbarutil:library:1.5.1'
    implementation 'org.greenrobot:eventbus:3.1.1'

//    implementation project(':flutter')
//    implementation project(':flutter_boost')
}

//第一步：增加实体类配置
class AndroidExt{

    int compileSdkVersionExt
    DefaultConfigExt defaultConfigExt

    AndroidExt(Project project) {
        //ExtensionContainer API 实现嵌套 extension
        defaultConfigExt = project.extensions.create('defaultConfigExt', DefaultConfigExt.class)
    }

    /**
     * 通过 Action 创建内部 Extension，名称为方法名 defaultConfig
     * @param action 可执行的动作，实质上是一个代码块
     */
//    void defaultConfigExt(Action<DefaultConfigExt> action) {
//        action.execute(defaultConfigExt)
//    }
}

class DefaultConfigExt{
    String applicationIdExt
    int minSdkVersionExt
    int targetSdkVersionExt
    int versionCodeExt
    String versionNameExt
    UserExt userExt

    DefaultConfigExt(Project project) {
        //ExtensionContainer API 实现嵌套 extension
        userExt = project.extensions.create('userExt', UserExt.class)
    }
}

class UserExt {
    String name
}

//第二步：创建 Extension
project.extensions.create('androidExt',AndroidExt)

//第三步：进行语句块配置
androidExt {
    compileSdkVersionExt 30
    defaultConfigExt {
        applicationIdExt 'com.dream.gradledemo'
        minSdkVersionExt 19
        targetSdkVersionExt 30
        versionCodeExt 1
        versionNameExt '1.0'

        userExt {
            name "张三"
        }
    }
}

//第四步：编写 Task 进行测试
project.task('testTask'){
    doLast {
        println project.androidExt.compileSdkVersionExt
        println project.androidExt.defaultConfigExt.applicationIdExt
        println project.androidExt.defaultConfigExt.minSdkVersionExt
        println project.androidExt.defaultConfigExt.targetSdkVersionExt
        println project.androidExt.defaultConfigExt.versionCodeExt
        println project.androidExt.defaultConfigExt.versionNameExt
        println project.androidExt.defaultConfigExt.userExt.name
    }
}



